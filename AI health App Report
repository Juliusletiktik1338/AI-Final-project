AI Health Monitor System: Technical Report
1. Executive Summary
This report provides a technical overview of the AI Health Monitor System, a web application designed to simulate real-time health data monitoring. The application uses modern web technologies, including React for the front end, Firebase Firestore for data persistence, and a JavaScript-based machine learning model for anomaly detection. Its primary function is to demonstrate the process of collecting sensor data, identifying unusual patterns, and providing personalized, rule-based recommendations to a user.

2. Core Functionality
The application's core functionality is built around a closed-loop system of data simulation, storage, analysis, and feedback.

2.1. Data Simulation
The app simulates continuous health data, including heart rate, blood oxygen, and activity level. This data is generated at a fixed interval of 5 seconds using a custom function that mimics a normal distribution, ensuring the data values fluctuate within a realistic range.

2.2. Real-Time Data Persistence
Data is stored persistently and updated in real time using Firebase Firestore. The application initializes a Firebase connection and authenticates the user anonymously to a unique user ID. This user-specific data is stored in the path artifacts/{appId}/users/{userId}/health_metrics, allowing for a personalized health history. The onSnapshot listener ensures that the UI updates immediately whenever a new data point is added to the database.

2.3. Anomaly Detection
For anomaly detection, the application utilizes the Isolation Forest machine learning model.

Training: The model is trained on the user's recent health history. A contamination rate of 5% is set to define the expected proportion of outliers.

Prediction: As new data points are simulated and added, the model predicts whether the combination of heart rate and blood oxygen falls within the normal range or represents an anomaly. A prediction of -1 indicates an anomaly, while 1 indicates a normal data point.

2.4. Personalized Recommendations
Recommendations are generated based on the anomaly detection results and a simple rule-based system.

Anomalies: If an anomaly is detected, the app provides specific advice based on the high or low values of the heart rate and blood oxygen readings.

Normal State: If no anomalies are detected, the app provides general wellness tips, such as suggesting an increase in activity level if the current level is "low."

3. Technology Stack
React: Used for building the single-page application and managing the UI's state.

Firebase: Provides backend services for authentication (getAuth, signInAnonymously) and a NoSQL database (getFirestore, onSnapshot, addDoc) for real-time data storage.

Isolation Forest: An external JavaScript library used for unsupervised anomaly detection.

Tailwind CSS: A utility-first CSS framework used to style the entire application and ensure a fully responsive, modern user interface.

4. User Interface and Experience
The application presents a clean, responsive, and intuitive interface. It is divided into clear sections that display:

Current Metrics: The most recent heart rate, blood oxygen, and activity level readings.

Anomaly Alerts: Real-time alerts displayed prominently in red if an unusual health pattern is detected.

Personalized Recommendations: Actionable tips and advice based on the health data analysis.

Recent Health History: A table showing the last five recorded data points for easy historical reference.

The user's unique ID is also displayed on the screen for transparency, showing how the data is tied to their session.

5. Limitations & Future Development
This application serves as a demonstration and has the following limitations:

Simulated Data: The health metrics are generated randomly and do not represent real-world medical conditions.

No Medical Advice: The recommendations are for demonstration purposes only and should not be considered professional medical advice.

Simplified Model: The Isolation Forest model is a simple, unsupervised method. A production-ready system would require a more robust, validated model trained on a vast amount of diverse data.

Data Visualization: Future enhancements could include a charting library (e.g., D3.js or Chart.js) to provide a more comprehensive visual history of health metrics over time.
